{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ShanxuLi/AI-Machine-learning/blob/main/Data_Preprocessing%20in%20AI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# AI FOR ACCELERATED MATERIALS MODELING AND DESIGNâ€‹\n",
        "# Coding Assignment 1: Data Preprocessing\n",
        "\n",
        "## Introduction:\n",
        "\n",
        "Before you start working on this assignment in Google Colab:\n",
        "1. Go to **File** in the top-left menu.\n",
        "2. Select **Save a copy in Drive**.\n",
        "3. This will create your own copy of the assignment. Make sure you work in your copy to avoid data conflicts and loss.\n",
        "4. Upon completion, share the final link for evaluation. Ensure that your notebook is set to \"Anyone with the link can view\".\n",
        "\n",
        "## Objective:\n",
        "\n",
        "Dive deep into preprocessing techniques and refine the dataset for analyses.\n",
        "\n",
        "## Prerequisites:\n",
        "1. Upload the provided `.csv` dataset to your Google Drive.\n",
        "2. Install the necessary libraries.\n",
        "\n",
        "## Dataset Description:\n",
        "- **Columns**:\n",
        "    - `Unnamed: 0`: Index or ID column.\n",
        "    - `Atomic Radius(Atomic unit)`: Measurement of the atomic radius.\n",
        "    - `Expansion Coefficient`: Coefficient indicating how much a material expands with temperature.\n",
        "    - `Electron Affinity(-ive)`: Measurement of the electron affinity in negative value.\n",
        "    - `Conductivity`: Material's electricity conduction property.\n",
        "    - `Yield Strength`: Strength at which a material begins to deform under load.\n",
        "    - `Outcome`: Resultant variable (classification outcome or target variable).\n",
        "\n",
        "\n",
        "\n",
        "## Submission:\n",
        "- Submit the Google Colab notebook link with all the executed cells.\n",
        "- Ensure that the notebook is set to \"Anyone with the link can view\".\n",
        "\n"
      ],
      "metadata": {
        "id": "hNGL-b4IbYDb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "\n",
        "## **Assignment Steps:**\n",
        "# 1. Setup and Data Loading:\n",
        "\n",
        "# Load the data from Google Drive"
      ],
      "metadata": {
        "id": "1K4tR3YWgnww"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import pandas\n",
        "import pandas as pd\n",
        "\n",
        "#Load the dataset\n",
        "df = pd.read_csv(\"/content/Dataset.csv\")\n",
        "\n",
        "# Display the first few rows\n",
        "df.head()"
      ],
      "metadata": {
        "id": "D4ex3MytAGGv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "1148c271-e0b5-49f6-a364-d7e6fe0c0c5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  Atomic Radius(Atomic unit)  Expansion Coefficient  \\\n",
              "0         0.0                        1.20                  0.000   \n",
              "1         1.0                        1.32                  0.006   \n",
              "2         2.0                        1.33                  0.008   \n",
              "3         3.0                        1.34                  0.008   \n",
              "4         4.0                        1.32                  0.008   \n",
              "\n",
              "   Electron Affinity(-ive)  Conductivity  Yield Strength  Outcome  \n",
              "0                     73.0          1.20     1213.355372      2.0  \n",
              "1                     17.0         21.84      136.809524      1.0  \n",
              "2                     16.0         28.14      179.362319      1.0  \n",
              "3                     16.0         55.20       57.607167      1.0  \n",
              "4                     16.0         47.76       59.913043      1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9fd22671-304e-405a-8759-3238e5aadde1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Atomic Radius(Atomic unit)</th>\n",
              "      <th>Expansion Coefficient</th>\n",
              "      <th>Electron Affinity(-ive)</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Yield Strength</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.20</td>\n",
              "      <td>0.000</td>\n",
              "      <td>73.0</td>\n",
              "      <td>1.20</td>\n",
              "      <td>1213.355372</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.32</td>\n",
              "      <td>0.006</td>\n",
              "      <td>17.0</td>\n",
              "      <td>21.84</td>\n",
              "      <td>136.809524</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>1.33</td>\n",
              "      <td>0.008</td>\n",
              "      <td>16.0</td>\n",
              "      <td>28.14</td>\n",
              "      <td>179.362319</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>1.34</td>\n",
              "      <td>0.008</td>\n",
              "      <td>16.0</td>\n",
              "      <td>55.20</td>\n",
              "      <td>57.607167</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>1.32</td>\n",
              "      <td>0.008</td>\n",
              "      <td>16.0</td>\n",
              "      <td>47.76</td>\n",
              "      <td>59.913043</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9fd22671-304e-405a-8759-3238e5aadde1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9fd22671-304e-405a-8759-3238e5aadde1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9fd22671-304e-405a-8759-3238e5aadde1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-41e5aa13-dee5-4dae-a92f-7f2a0d7cc5d8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41e5aa13-dee5-4dae-a92f-7f2a0d7cc5d8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-41e5aa13-dee5-4dae-a92f-7f2a0d7cc5d8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. Data Cleaning:\n",
        "## a. Drop Unwanted Columns:"
      ],
      "metadata": {
        "id": "l8_ahp-9iFz9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop the specific column\n",
        "df = df.drop(columns=['Electron Affinity(-ive)'])"
      ],
      "metadata": {
        "id": "qoSKR2xr_xFY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## b. Handling Missing Values:"
      ],
      "metadata": {
        "id": "llFoYnBXiTSp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle missing values\n",
        "df = df.fillna(0.006)\n",
        "\n",
        "# Check again for missing values\n",
        "missing_values= df.isnull().sum()\n",
        "print(missing_values)"
      ],
      "metadata": {
        "id": "2pxyRo_HibOG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "369704aa-8d4d-4aea-b9fa-2152233471b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unnamed: 0                    0\n",
            "Atomic Radius(Atomic unit)    0\n",
            "Expansion Coefficient         0\n",
            "Conductivity                  0\n",
            "Yield Strength                0\n",
            "Outcome                       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## c. Identifying and Removing Duplicates:"
      ],
      "metadata": {
        "id": "yKkC9rahixer"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicate rows\n",
        "duplicates = df.duplicated().sum()\n",
        "print(f\"Number of duplicate rows = {duplicates}\")\n",
        "\n",
        "# Drop duplicates\n",
        "df.drop_duplicates()\n"
      ],
      "metadata": {
        "id": "QIcYEqLkiwTs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "outputId": "e9417db0-6fed-458b-b667-13cf25e53e1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of duplicate rows = 79\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  Atomic Radius(Atomic unit)  Expansion Coefficient  \\\n",
              "0            0.0                        1.20                  0.000   \n",
              "1            1.0                        1.32                  0.006   \n",
              "2            2.0                        1.33                  0.008   \n",
              "3            3.0                        1.34                  0.008   \n",
              "4            4.0                        1.32                  0.008   \n",
              "...          ...                         ...                    ...   \n",
              "1994      1994.0                        1.33                  0.008   \n",
              "1995      1995.0                        1.33                  0.007   \n",
              "1996      1996.0                        1.33                  0.008   \n",
              "1997      1997.0                        1.36                  0.009   \n",
              "1998      1998.0                        1.36                  0.009   \n",
              "\n",
              "      Conductivity  Yield Strength  Outcome  \n",
              "0             1.20     1213.355372      2.0  \n",
              "1            21.84      136.809524      1.0  \n",
              "2            28.14      179.362319      1.0  \n",
              "3            55.20       57.607167      1.0  \n",
              "4            47.76       59.913043      1.0  \n",
              "...            ...             ...      ...  \n",
              "1994          3.60       14.515858      1.0  \n",
              "1995          3.90       14.515858      1.0  \n",
              "1996          5.00       26.192593      1.0  \n",
              "1997          1.84        8.661871      1.0  \n",
              "1998          1.02        9.280576      1.0  \n",
              "\n",
              "[1920 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5a44570-e664-4f62-8f8e-6765fe6cb934\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Atomic Radius(Atomic unit)</th>\n",
              "      <th>Expansion Coefficient</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Yield Strength</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.20</td>\n",
              "      <td>0.000</td>\n",
              "      <td>1.20</td>\n",
              "      <td>1213.355372</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.32</td>\n",
              "      <td>0.006</td>\n",
              "      <td>21.84</td>\n",
              "      <td>136.809524</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>1.33</td>\n",
              "      <td>0.008</td>\n",
              "      <td>28.14</td>\n",
              "      <td>179.362319</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>1.34</td>\n",
              "      <td>0.008</td>\n",
              "      <td>55.20</td>\n",
              "      <td>57.607167</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>1.32</td>\n",
              "      <td>0.008</td>\n",
              "      <td>47.76</td>\n",
              "      <td>59.913043</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1994</th>\n",
              "      <td>1994.0</td>\n",
              "      <td>1.33</td>\n",
              "      <td>0.008</td>\n",
              "      <td>3.60</td>\n",
              "      <td>14.515858</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1995</th>\n",
              "      <td>1995.0</td>\n",
              "      <td>1.33</td>\n",
              "      <td>0.007</td>\n",
              "      <td>3.90</td>\n",
              "      <td>14.515858</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996</th>\n",
              "      <td>1996.0</td>\n",
              "      <td>1.33</td>\n",
              "      <td>0.008</td>\n",
              "      <td>5.00</td>\n",
              "      <td>26.192593</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1997</th>\n",
              "      <td>1997.0</td>\n",
              "      <td>1.36</td>\n",
              "      <td>0.009</td>\n",
              "      <td>1.84</td>\n",
              "      <td>8.661871</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>1998.0</td>\n",
              "      <td>1.36</td>\n",
              "      <td>0.009</td>\n",
              "      <td>1.02</td>\n",
              "      <td>9.280576</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1920 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5a44570-e664-4f62-8f8e-6765fe6cb934')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5a44570-e664-4f62-8f8e-6765fe6cb934 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5a44570-e664-4f62-8f8e-6765fe6cb934');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6be1454-9c96-42de-8f7d-da38bd84c61d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6be1454-9c96-42de-8f7d-da38bd84c61d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6be1454-9c96-42de-8f7d-da38bd84c61d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Data Exploration:"
      ],
      "metadata": {
        "id": "GT_pefyJi7MN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Descriptive Statistics\n",
        "print(df.describe())\n",
        "\n",
        "# Correlation Matrix\n",
        "print(df.corr())\n"
      ],
      "metadata": {
        "id": "v5AS1f2si6cr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4959c1b3-ee55-4e0a-d3eb-e511bc4c1087"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        Unnamed: 0  Atomic Radius(Atomic unit)  Expansion Coefficient  \\\n",
            "count  1999.000000                 1999.000000            1999.000000   \n",
            "mean    975.848664                    1.277969               0.004542   \n",
            "std     603.907583                    0.276836               0.002894   \n",
            "min       0.000000                    0.006000               0.000000   \n",
            "25%     439.500000                    1.250000               0.002000   \n",
            "50%     999.000000                    1.330000               0.005000   \n",
            "75%    1498.500000                    1.400000               0.007000   \n",
            "max    1998.000000                    1.600000               0.015000   \n",
            "\n",
            "       Conductivity  Yield Strength      Outcome  \n",
            "count   1999.000000     1999.000000  1999.000000  \n",
            "mean      11.313957      227.555685     1.217349  \n",
            "std       16.049462      361.838759     0.623453  \n",
            "min        0.000000        0.006000     0.006000  \n",
            "25%        2.955000       40.359707     1.000000  \n",
            "50%        6.880000      109.401709     1.000000  \n",
            "75%       13.600000      258.797557     1.000000  \n",
            "max      187.590000     3826.644295     3.000000  \n",
            "                            Unnamed: 0  Atomic Radius(Atomic unit)  \\\n",
            "Unnamed: 0                    1.000000                    0.267275   \n",
            "Atomic Radius(Atomic unit)    0.267275                    1.000000   \n",
            "Expansion Coefficient         0.368084                   -0.153509   \n",
            "Conductivity                 -0.159220                    0.093174   \n",
            "Yield Strength                0.224518                    0.075348   \n",
            "Outcome                       0.091395                    0.417352   \n",
            "\n",
            "                            Expansion Coefficient  Conductivity  \\\n",
            "Unnamed: 0                               0.368084     -0.159220   \n",
            "Atomic Radius(Atomic unit)              -0.153509      0.093174   \n",
            "Expansion Coefficient                    1.000000      0.037349   \n",
            "Conductivity                             0.037349      1.000000   \n",
            "Yield Strength                           0.210538      0.063834   \n",
            "Outcome                                 -0.182682     -0.117242   \n",
            "\n",
            "                            Yield Strength   Outcome  \n",
            "Unnamed: 0                        0.224518  0.091395  \n",
            "Atomic Radius(Atomic unit)        0.075348  0.417352  \n",
            "Expansion Coefficient             0.210538 -0.182682  \n",
            "Conductivity                      0.063834 -0.117242  \n",
            "Yield Strength                    1.000000  0.253159  \n",
            "Outcome                           0.253159  1.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4. Advanced Data Exploration:\n",
        "## a. Outlier Detection:"
      ],
      "metadata": {
        "id": "T4JQxxiwjQ8K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the first (Q1) and third quartile (Q3) for each column in the dataset\n",
        "Q1 = df.quantile(0.25)\n",
        "Q3 = df.quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Defining bounds for the outliers\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Filter out the outliers\n",
        "df_outliers_removed = df[~((df < lower_bound) | (df > upper_bound)).any(axis=1)]\n"
      ],
      "metadata": {
        "id": "t3MApGbpjQcO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5. Data Transformation:\n",
        "## a. Normalize Features:"
      ],
      "metadata": {
        "id": "YZlkMn0RjWnS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import the MinMaxScaler class from the sklearn.preprocessing module\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "\n",
        "# Define a list of feature names that need to be scaled.\n",
        "# These are the columns in the dataset that will be normalized.\n",
        "features = ['Atomic Radius(Atomic unit)','Expansion Coefficient','Conductivity','Yield Strength']\n",
        "\n",
        "# Instantiate the MinMaxScaler. This scaler scales and translates each feature\n",
        "# individually such that it is in the given range on the training set, i.e. between 0 and 1.\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "# Apply the scaler to the specified features in the dataframe.\n",
        "df[features] = scaler.fit_transform(df[features])\n"
      ],
      "metadata": {
        "id": "JHQ6qKbsjfOM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# b. Feature Engineering:"
      ],
      "metadata": {
        "id": "08IEB48JpEN0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new column in the dataframe called 'Conductivity Strength'.\n",
        "# This new feature is derived by multiplying the values in the 'Conductivity' column\n",
        "# with the values in the 'Yield Strength' column for each row.\n",
        "# The idea behind this operation might be to capture a combined effect or interaction\n",
        "# between the conductivity and the yield strength of the materials.\n",
        "df['Conductivity Strength'] = df['Conductivity'] * df['Yield Strength']\n"
      ],
      "metadata": {
        "id": "BgnH-rvajeGB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 6. Feature Extraction & Selection:\n",
        "## a. PCA:"
      ],
      "metadata": {
        "id": "OSgEtIrlpPqq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import the necessary module for Principal Component Analysis (PCA) from sklearn.\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "\n",
        "# Initialize a PCA model specifying the number of components to retain.\n",
        "pca = PCA(n_components=1)\n",
        "\n",
        "# Fit and transform the data (from the 'features' list) using PCA.\n",
        "# This reduces the dimensionality of the data while preserving as much variance as possible.\n",
        "principal_components = pca.fit_transform(df[features])\n",
        "\n",
        "\n",
        "# Convert the resulting principal components into a new DataFrame for further analysis.\n",
        "# The columns are named based on the principal component number.\n",
        "df_pca = pd.DataFrame(data = principal_components, columns = ['Conductivity Strength'])\n"
      ],
      "metadata": {
        "id": "_mO0bdnupUHC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# b. Feature Importance using Tree-based Models:"
      ],
      "metadata": {
        "id": "SP4RiWRlpXji"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import the necessary module for ensemble learning methods from sklearn.\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn import preprocessing\n",
        "\n",
        "# Split the dataset:\n",
        "# 'X' contains the feature data by dropping the 'Outcome' column.\n",
        "# 'y' contains the target labels, which in this case is the 'Outcome' column.\n",
        "X = df.drop(columns=['Outcome'])\n",
        "y = df['Outcome']\n",
        "lab = preprocessing.LabelEncoder()\n",
        "y_transformed = lab.fit_transform(y)\n",
        "\n",
        "\n",
        "\n",
        "# Initialize the ensemble classifier (e.g., RandomForest, GradientBoosting, etc.)\n",
        "clf = RandomForestClassifier()\n",
        "\n",
        "# Fit the classifier on the provided data.\n",
        "clf.fit(X, y_transformed)\n",
        "\n",
        "\n",
        "# Retrieve the importance of each feature as determined by the classifier.\n",
        "feature_importances = clf.feature_importances_\n",
        "\n",
        "# Convert the importances into a Pandas Series for easier manipulation,\n",
        "# then sort the features based on their importance.\n",
        "important_features = pd.Series(feature_importances, index=X.columns)\n",
        "important_features = important_features.sort_values(ascending=False)\n"
      ],
      "metadata": {
        "id": "3Y3iwuOrpWoS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 7. Data Reduction:\n",
        "## a. Feature Selection:"
      ],
      "metadata": {
        "id": "86bGhZbxpe0c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Select the top features (or another specified range) based on their importance.\n",
        "selected_features = important_features[2:4].index.tolist()\n",
        "\n",
        "# Create a new DataFrame 'df_reduced' containing only the selected important features.\n",
        "df_reduced = df[selected_features]\n"
      ],
      "metadata": {
        "id": "9XNCEorhpTgS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 7. Bonus Challenge (Optional):\n",
        "a. Data Visualization: Visualize the original features and the principal components using appropriate plots (e.g., scatter plots, histograms).\n",
        "\n"
      ],
      "metadata": {
        "id": "v1EBeSH-puPK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.hist(features)"
      ],
      "metadata": {
        "id": "-lu0YESOpy2h",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "outputId": "506d0f4a-f413-4bdc-abfc-4cde4a251e88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([1., 0., 0., 1., 0., 0., 1., 0., 0., 1.]),\n",
              " array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3. ]),\n",
              " <BarContainer object of 10 artists>)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}